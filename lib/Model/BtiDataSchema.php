<?php
/**
 * BtiDataSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ЦИАН АПИ
 *
 * <a href=\"https://www.cian.ru/help/about/37970/\">Условия использования</a>  ## Описание  ### Авторизация Для работы с API необходимо получить ключ авторизации. Для получения ключа нужно написать письмо на import@cian.ru с темой \"ACCESS KEY\" и названием агентства, которое вы представляете. Менеджер уточнит подробности и пришлет ACCESS KEY. Для каждой учетной записи на ЦИАН выдается отдельный ключ авторизации.  Далее все запросы выполняются с заголовком: `Authorization: Bearer <ACCESS KEY>`.  ### Дата и время Формат данных для времени (date-time): `2020-07-18 04:52:33.051204` и для даты (date): `2020-07-18`   Во всех запросах дата и время передаются и возвращаются в таймзоне `Europe/Moscow`.
 *
 * OpenAPI spec version: 1.0
 * Contact: import@cian.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BtiDataSchema Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BtiDataSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BtiDataSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ceiling_height' => 'double',
        'chute_count' => 'int',
        'entrances' => 'int',
        'flat_count' => 'int',
        'floor_max' => 'int',
        'has_playground' => 'bool',
        'has_sportsground' => 'bool',
        'house_gas_supply_type' => 'string',
        'house_heat_supply_type' => 'string',
        'house_material_type' => 'string',
        'house_overhaul_fund_type' => 'string',
        'house_overlap_type' => 'string',
        'is_emergency' => 'bool',
        'lifts' => 'int',
        'year_release' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ceiling_height' => 'double',
        'chute_count' => 'int64',
        'entrances' => 'int64',
        'flat_count' => 'int64',
        'floor_max' => 'int64',
        'has_playground' => null,
        'has_sportsground' => null,
        'house_gas_supply_type' => null,
        'house_heat_supply_type' => null,
        'house_material_type' => null,
        'house_overhaul_fund_type' => null,
        'house_overlap_type' => null,
        'is_emergency' => null,
        'lifts' => 'int64',
        'year_release' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ceiling_height' => 'ceilingHeight',
        'chute_count' => 'chuteCount',
        'entrances' => 'entrances',
        'flat_count' => 'flatCount',
        'floor_max' => 'floorMax',
        'has_playground' => 'hasPlayground',
        'has_sportsground' => 'hasSportsground',
        'house_gas_supply_type' => 'houseGasSupplyType',
        'house_heat_supply_type' => 'houseHeatSupplyType',
        'house_material_type' => 'houseMaterialType',
        'house_overhaul_fund_type' => 'houseOverhaulFundType',
        'house_overlap_type' => 'houseOverlapType',
        'is_emergency' => 'isEmergency',
        'lifts' => 'lifts',
        'year_release' => 'yearRelease'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ceiling_height' => 'setCeilingHeight',
        'chute_count' => 'setChuteCount',
        'entrances' => 'setEntrances',
        'flat_count' => 'setFlatCount',
        'floor_max' => 'setFloorMax',
        'has_playground' => 'setHasPlayground',
        'has_sportsground' => 'setHasSportsground',
        'house_gas_supply_type' => 'setHouseGasSupplyType',
        'house_heat_supply_type' => 'setHouseHeatSupplyType',
        'house_material_type' => 'setHouseMaterialType',
        'house_overhaul_fund_type' => 'setHouseOverhaulFundType',
        'house_overlap_type' => 'setHouseOverlapType',
        'is_emergency' => 'setIsEmergency',
        'lifts' => 'setLifts',
        'year_release' => 'setYearRelease'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ceiling_height' => 'getCeilingHeight',
        'chute_count' => 'getChuteCount',
        'entrances' => 'getEntrances',
        'flat_count' => 'getFlatCount',
        'floor_max' => 'getFloorMax',
        'has_playground' => 'getHasPlayground',
        'has_sportsground' => 'getHasSportsground',
        'house_gas_supply_type' => 'getHouseGasSupplyType',
        'house_heat_supply_type' => 'getHouseHeatSupplyType',
        'house_material_type' => 'getHouseMaterialType',
        'house_overhaul_fund_type' => 'getHouseOverhaulFundType',
        'house_overlap_type' => 'getHouseOverlapType',
        'is_emergency' => 'getIsEmergency',
        'lifts' => 'getLifts',
        'year_release' => 'getYearRelease'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const HOUSE_GAS_SUPPLY_TYPE_AUTONOMOUS = 'autonomous';
    const HOUSE_GAS_SUPPLY_TYPE_CENTRAL = 'central';
    const HOUSE_GAS_SUPPLY_TYPE_UNKNOWN = 'unknown';
    const HOUSE_GAS_SUPPLY_TYPE_WITHOUT = 'without';
    const HOUSE_HEAT_SUPPLY_TYPE_AUTONOMOUS = 'autonomous';
    const HOUSE_HEAT_SUPPLY_TYPE_AUTONOMOUS_BOILER = 'autonomousBoiler';
    const HOUSE_HEAT_SUPPLY_TYPE_AUTONOMOUS_GAS = 'autonomousGas';
    const HOUSE_HEAT_SUPPLY_TYPE_BOILER = 'boiler';
    const HOUSE_HEAT_SUPPLY_TYPE_CENTRAL = 'central';
    const HOUSE_HEAT_SUPPLY_TYPE_COAL = 'coal';
    const HOUSE_HEAT_SUPPLY_TYPE_DIESEL = 'diesel';
    const HOUSE_HEAT_SUPPLY_TYPE_ELECTRIC = 'electric';
    const HOUSE_HEAT_SUPPLY_TYPE_FIREPLACE = 'fireplace';
    const HOUSE_HEAT_SUPPLY_TYPE_GAS = 'gas';
    const HOUSE_HEAT_SUPPLY_TYPE_GAS_WATER_HEATER = 'gasWaterHeater';
    const HOUSE_HEAT_SUPPLY_TYPE_HAS = 'has';
    const HOUSE_HEAT_SUPPLY_TYPE_ITP = 'itp';
    const HOUSE_HEAT_SUPPLY_TYPE_NONE = 'none';
    const HOUSE_HEAT_SUPPLY_TYPE_OTHER = 'other';
    const HOUSE_HEAT_SUPPLY_TYPE_SOLID_FUEL_BOILER = 'solidFuelBoiler';
    const HOUSE_HEAT_SUPPLY_TYPE_STOVE = 'stove';
    const HOUSE_HEAT_SUPPLY_TYPE_WITHOUT = 'without';
    const HOUSE_MATERIAL_TYPE_AEROCRETE_BLOCK = 'aerocreteBlock';
    const HOUSE_MATERIAL_TYPE_BLOCK = 'block';
    const HOUSE_MATERIAL_TYPE_BOARDS = 'boards';
    const HOUSE_MATERIAL_TYPE_BRICK = 'brick';
    const HOUSE_MATERIAL_TYPE_CUSTOM = 'custom';
    const HOUSE_MATERIAL_TYPE_FOAM_CONCRETE_BLOCK = 'foamConcreteBlock';
    const HOUSE_MATERIAL_TYPE_GAS_SILICATE_BLOCK = 'gasSilicateBlock';
    const HOUSE_MATERIAL_TYPE_MONOLITH = 'monolith';
    const HOUSE_MATERIAL_TYPE_MONOLITH_BRICK = 'monolithBrick';
    const HOUSE_MATERIAL_TYPE_NONE = 'none';
    const HOUSE_MATERIAL_TYPE_OLD = 'old';
    const HOUSE_MATERIAL_TYPE_PANEL = 'panel';
    const HOUSE_MATERIAL_TYPE_STALIN = 'stalin';
    const HOUSE_MATERIAL_TYPE_WIREFRAME = 'wireframe';
    const HOUSE_MATERIAL_TYPE_WOOD = 'wood';
    const HOUSE_OVERHAUL_FUND_TYPE_REGIONAL_OP = 'regionalOp';
    const HOUSE_OVERHAUL_FUND_TYPE_SPECIAL_ORG = 'specialOrg';
    const HOUSE_OVERHAUL_FUND_TYPE_SPECIAL_REGIONAL_OP = 'specialRegionalOp';
    const HOUSE_OVERHAUL_FUND_TYPE_UNDEFINED = 'undefined';
    const HOUSE_OVERHAUL_FUND_TYPE_UNKNOWN = 'unknown';
    const HOUSE_OVERLAP_TYPE_CONCRETE = 'concrete';
    const HOUSE_OVERLAP_TYPE_MIXED = 'mixed';
    const HOUSE_OVERLAP_TYPE_OTHER = 'other';
    const HOUSE_OVERLAP_TYPE_UNKNOWN = 'unknown';
    const HOUSE_OVERLAP_TYPE_WOOD = 'wood';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHouseGasSupplyTypeAllowableValues()
    {
        return [
            self::HOUSE_GAS_SUPPLY_TYPE_AUTONOMOUS,
            self::HOUSE_GAS_SUPPLY_TYPE_CENTRAL,
            self::HOUSE_GAS_SUPPLY_TYPE_UNKNOWN,
            self::HOUSE_GAS_SUPPLY_TYPE_WITHOUT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHouseHeatSupplyTypeAllowableValues()
    {
        return [
            self::HOUSE_HEAT_SUPPLY_TYPE_AUTONOMOUS,
            self::HOUSE_HEAT_SUPPLY_TYPE_AUTONOMOUS_BOILER,
            self::HOUSE_HEAT_SUPPLY_TYPE_AUTONOMOUS_GAS,
            self::HOUSE_HEAT_SUPPLY_TYPE_BOILER,
            self::HOUSE_HEAT_SUPPLY_TYPE_CENTRAL,
            self::HOUSE_HEAT_SUPPLY_TYPE_COAL,
            self::HOUSE_HEAT_SUPPLY_TYPE_DIESEL,
            self::HOUSE_HEAT_SUPPLY_TYPE_ELECTRIC,
            self::HOUSE_HEAT_SUPPLY_TYPE_FIREPLACE,
            self::HOUSE_HEAT_SUPPLY_TYPE_GAS,
            self::HOUSE_HEAT_SUPPLY_TYPE_GAS_WATER_HEATER,
            self::HOUSE_HEAT_SUPPLY_TYPE_HAS,
            self::HOUSE_HEAT_SUPPLY_TYPE_ITP,
            self::HOUSE_HEAT_SUPPLY_TYPE_NONE,
            self::HOUSE_HEAT_SUPPLY_TYPE_OTHER,
            self::HOUSE_HEAT_SUPPLY_TYPE_SOLID_FUEL_BOILER,
            self::HOUSE_HEAT_SUPPLY_TYPE_STOVE,
            self::HOUSE_HEAT_SUPPLY_TYPE_WITHOUT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHouseMaterialTypeAllowableValues()
    {
        return [
            self::HOUSE_MATERIAL_TYPE_AEROCRETE_BLOCK,
            self::HOUSE_MATERIAL_TYPE_BLOCK,
            self::HOUSE_MATERIAL_TYPE_BOARDS,
            self::HOUSE_MATERIAL_TYPE_BRICK,
            self::HOUSE_MATERIAL_TYPE_CUSTOM,
            self::HOUSE_MATERIAL_TYPE_FOAM_CONCRETE_BLOCK,
            self::HOUSE_MATERIAL_TYPE_GAS_SILICATE_BLOCK,
            self::HOUSE_MATERIAL_TYPE_MONOLITH,
            self::HOUSE_MATERIAL_TYPE_MONOLITH_BRICK,
            self::HOUSE_MATERIAL_TYPE_NONE,
            self::HOUSE_MATERIAL_TYPE_OLD,
            self::HOUSE_MATERIAL_TYPE_PANEL,
            self::HOUSE_MATERIAL_TYPE_STALIN,
            self::HOUSE_MATERIAL_TYPE_WIREFRAME,
            self::HOUSE_MATERIAL_TYPE_WOOD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHouseOverhaulFundTypeAllowableValues()
    {
        return [
            self::HOUSE_OVERHAUL_FUND_TYPE_REGIONAL_OP,
            self::HOUSE_OVERHAUL_FUND_TYPE_SPECIAL_ORG,
            self::HOUSE_OVERHAUL_FUND_TYPE_SPECIAL_REGIONAL_OP,
            self::HOUSE_OVERHAUL_FUND_TYPE_UNDEFINED,
            self::HOUSE_OVERHAUL_FUND_TYPE_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHouseOverlapTypeAllowableValues()
    {
        return [
            self::HOUSE_OVERLAP_TYPE_CONCRETE,
            self::HOUSE_OVERLAP_TYPE_MIXED,
            self::HOUSE_OVERLAP_TYPE_OTHER,
            self::HOUSE_OVERLAP_TYPE_UNKNOWN,
            self::HOUSE_OVERLAP_TYPE_WOOD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ceiling_height'] = isset($data['ceiling_height']) ? $data['ceiling_height'] : null;
        $this->container['chute_count'] = isset($data['chute_count']) ? $data['chute_count'] : null;
        $this->container['entrances'] = isset($data['entrances']) ? $data['entrances'] : null;
        $this->container['flat_count'] = isset($data['flat_count']) ? $data['flat_count'] : null;
        $this->container['floor_max'] = isset($data['floor_max']) ? $data['floor_max'] : null;
        $this->container['has_playground'] = isset($data['has_playground']) ? $data['has_playground'] : null;
        $this->container['has_sportsground'] = isset($data['has_sportsground']) ? $data['has_sportsground'] : null;
        $this->container['house_gas_supply_type'] = isset($data['house_gas_supply_type']) ? $data['house_gas_supply_type'] : null;
        $this->container['house_heat_supply_type'] = isset($data['house_heat_supply_type']) ? $data['house_heat_supply_type'] : null;
        $this->container['house_material_type'] = isset($data['house_material_type']) ? $data['house_material_type'] : null;
        $this->container['house_overhaul_fund_type'] = isset($data['house_overhaul_fund_type']) ? $data['house_overhaul_fund_type'] : null;
        $this->container['house_overlap_type'] = isset($data['house_overlap_type']) ? $data['house_overlap_type'] : null;
        $this->container['is_emergency'] = isset($data['is_emergency']) ? $data['is_emergency'] : null;
        $this->container['lifts'] = isset($data['lifts']) ? $data['lifts'] : null;
        $this->container['year_release'] = isset($data['year_release']) ? $data['year_release'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHouseGasSupplyTypeAllowableValues();
        if (!is_null($this->container['house_gas_supply_type']) && !in_array($this->container['house_gas_supply_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'house_gas_supply_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHouseHeatSupplyTypeAllowableValues();
        if (!is_null($this->container['house_heat_supply_type']) && !in_array($this->container['house_heat_supply_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'house_heat_supply_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHouseMaterialTypeAllowableValues();
        if (!is_null($this->container['house_material_type']) && !in_array($this->container['house_material_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'house_material_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHouseOverhaulFundTypeAllowableValues();
        if (!is_null($this->container['house_overhaul_fund_type']) && !in_array($this->container['house_overhaul_fund_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'house_overhaul_fund_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHouseOverlapTypeAllowableValues();
        if (!is_null($this->container['house_overlap_type']) && !in_array($this->container['house_overlap_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'house_overlap_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ceiling_height
     *
     * @return double
     */
    public function getCeilingHeight()
    {
        return $this->container['ceiling_height'];
    }

    /**
     * Sets ceiling_height
     *
     * @param double $ceiling_height Высота потолков
     *
     * @return $this
     */
    public function setCeilingHeight($ceiling_height)
    {
        $this->container['ceiling_height'] = $ceiling_height;

        return $this;
    }

    /**
     * Gets chute_count
     *
     * @return int
     */
    public function getChuteCount()
    {
        return $this->container['chute_count'];
    }

    /**
     * Sets chute_count
     *
     * @param int $chute_count Количество мусоропроводов
     *
     * @return $this
     */
    public function setChuteCount($chute_count)
    {
        $this->container['chute_count'] = $chute_count;

        return $this;
    }

    /**
     * Gets entrances
     *
     * @return int
     */
    public function getEntrances()
    {
        return $this->container['entrances'];
    }

    /**
     * Sets entrances
     *
     * @param int $entrances Число подъездов
     *
     * @return $this
     */
    public function setEntrances($entrances)
    {
        $this->container['entrances'] = $entrances;

        return $this;
    }

    /**
     * Gets flat_count
     *
     * @return int
     */
    public function getFlatCount()
    {
        return $this->container['flat_count'];
    }

    /**
     * Sets flat_count
     *
     * @param int $flat_count Число квартир
     *
     * @return $this
     */
    public function setFlatCount($flat_count)
    {
        $this->container['flat_count'] = $flat_count;

        return $this;
    }

    /**
     * Gets floor_max
     *
     * @return int
     */
    public function getFloorMax()
    {
        return $this->container['floor_max'];
    }

    /**
     * Sets floor_max
     *
     * @param int $floor_max Этажность
     *
     * @return $this
     */
    public function setFloorMax($floor_max)
    {
        $this->container['floor_max'] = $floor_max;

        return $this;
    }

    /**
     * Gets has_playground
     *
     * @return bool
     */
    public function getHasPlayground()
    {
        return $this->container['has_playground'];
    }

    /**
     * Sets has_playground
     *
     * @param bool $has_playground Наличие детской площадки
     *
     * @return $this
     */
    public function setHasPlayground($has_playground)
    {
        $this->container['has_playground'] = $has_playground;

        return $this;
    }

    /**
     * Gets has_sportsground
     *
     * @return bool
     */
    public function getHasSportsground()
    {
        return $this->container['has_sportsground'];
    }

    /**
     * Sets has_sportsground
     *
     * @param bool $has_sportsground Наличие спортивной площадки
     *
     * @return $this
     */
    public function setHasSportsground($has_sportsground)
    {
        $this->container['has_sportsground'] = $has_sportsground;

        return $this;
    }

    /**
     * Gets house_gas_supply_type
     *
     * @return string
     */
    public function getHouseGasSupplyType()
    {
        return $this->container['house_gas_supply_type'];
    }

    /**
     * Sets house_gas_supply_type
     *
     * @param string $house_gas_supply_type `autonomous`: Автономное   `central`: Центральное   `unknown`: Не известно   `without`: Отсутствует
     *
     * @return $this
     */
    public function setHouseGasSupplyType($house_gas_supply_type)
    {
        $allowedValues = $this->getHouseGasSupplyTypeAllowableValues();
        if (!is_null($house_gas_supply_type) && !in_array($house_gas_supply_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'house_gas_supply_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['house_gas_supply_type'] = $house_gas_supply_type;

        return $this;
    }

    /**
     * Gets house_heat_supply_type
     *
     * @return string
     */
    public function getHouseHeatSupplyType()
    {
        return $this->container['house_heat_supply_type'];
    }

    /**
     * Sets house_heat_supply_type
     *
     * @param string $house_heat_supply_type `autonomous`: Автономное   `autonomousBoiler`: Автономная котельная (крышная, встроенно-пристроенная)   `autonomousGas`: Автономное газовое   `boiler`: Котел | Квартирное (квартирный котел)   `central`: Центральное   `coal`: Центральное угольное   `diesel`: Дизельное   `electric`: Электрическое   `fireplace`: Камин   `gas`: Центральное газовое   `gasWaterHeater`: Газовый водонагреватель   `has`: Есть   `itp`: Индивидуальный тепловой пункт (ИТП)   `none`: Не указано   `other`: Другое   `solidFuelBoiler`: Твердотопливный котел   `stove`: Печь   `without`: Нет(без отопления)
     *
     * @return $this
     */
    public function setHouseHeatSupplyType($house_heat_supply_type)
    {
        $allowedValues = $this->getHouseHeatSupplyTypeAllowableValues();
        if (!is_null($house_heat_supply_type) && !in_array($house_heat_supply_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'house_heat_supply_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['house_heat_supply_type'] = $house_heat_supply_type;

        return $this;
    }

    /**
     * Gets house_material_type
     *
     * @return string
     */
    public function getHouseMaterialType()
    {
        return $this->container['house_material_type'];
    }

    /**
     * Sets house_material_type
     *
     * @param string $house_material_type `aerocreteBlock`: Газобетонный блок   `block`: Блочный   `boards`: Щитовой   `brick`: Кирпичный   `custom`: Другое   `foamConcreteBlock`: Пенобетонный блок   `gasSilicateBlock`: Газосиликатный блок   `monolith`: Монолитный   `monolithBrick`: Монолитно кирпичный   `none`: Не указано   `old`: Старый фонд   `panel`: Панельный   `stalin`: Сталинский   `wireframe`: Каркасный   `wood`: Деревянный
     *
     * @return $this
     */
    public function setHouseMaterialType($house_material_type)
    {
        $allowedValues = $this->getHouseMaterialTypeAllowableValues();
        if (!is_null($house_material_type) && !in_array($house_material_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'house_material_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['house_material_type'] = $house_material_type;

        return $this;
    }

    /**
     * Gets house_overhaul_fund_type
     *
     * @return string
     */
    public function getHouseOverhaulFundType()
    {
        return $this->container['house_overhaul_fund_type'];
    }

    /**
     * Sets house_overhaul_fund_type
     *
     * @param string $house_overhaul_fund_type `regionalOp`: На счете регионального оператора   `specialOrg`: На специальном счете организации   `specialRegionalOp`: На специальном счете у регионального оператора   `undefined`: Не определён   `unknown`: Не известно
     *
     * @return $this
     */
    public function setHouseOverhaulFundType($house_overhaul_fund_type)
    {
        $allowedValues = $this->getHouseOverhaulFundTypeAllowableValues();
        if (!is_null($house_overhaul_fund_type) && !in_array($house_overhaul_fund_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'house_overhaul_fund_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['house_overhaul_fund_type'] = $house_overhaul_fund_type;

        return $this;
    }

    /**
     * Gets house_overlap_type
     *
     * @return string
     */
    public function getHouseOverlapType()
    {
        return $this->container['house_overlap_type'];
    }

    /**
     * Sets house_overlap_type
     *
     * @param string $house_overlap_type `concrete`: Железобетонные   `mixed`: Смешанные   `other`: Другие   `unknown`: Не известно   `wood`: Деревянные
     *
     * @return $this
     */
    public function setHouseOverlapType($house_overlap_type)
    {
        $allowedValues = $this->getHouseOverlapTypeAllowableValues();
        if (!is_null($house_overlap_type) && !in_array($house_overlap_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'house_overlap_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['house_overlap_type'] = $house_overlap_type;

        return $this;
    }

    /**
     * Gets is_emergency
     *
     * @return bool
     */
    public function getIsEmergency()
    {
        return $this->container['is_emergency'];
    }

    /**
     * Sets is_emergency
     *
     * @param bool $is_emergency Признан аварийным
     *
     * @return $this
     */
    public function setIsEmergency($is_emergency)
    {
        $this->container['is_emergency'] = $is_emergency;

        return $this;
    }

    /**
     * Gets lifts
     *
     * @return int
     */
    public function getLifts()
    {
        return $this->container['lifts'];
    }

    /**
     * Sets lifts
     *
     * @param int $lifts Количество лифтов
     *
     * @return $this
     */
    public function setLifts($lifts)
    {
        $this->container['lifts'] = $lifts;

        return $this;
    }

    /**
     * Gets year_release
     *
     * @return int
     */
    public function getYearRelease()
    {
        return $this->container['year_release'];
    }

    /**
     * Sets year_release
     *
     * @param int $year_release Год постройки
     *
     * @return $this
     */
    public function setYearRelease($year_release)
    {
        $this->container['year_release'] = $year_release;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


