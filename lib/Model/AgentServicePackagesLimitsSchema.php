<?php
/**
 * AgentServicePackagesLimitsSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ЦИАН АПИ
 *
 * <a href=\"https://www.cian.ru/help/about/37970/\">Условия использования</a>  ## Описание  ### Авторизация Для работы с API необходимо получить ключ авторизации. Для получения ключа нужно написать письмо на import@cian.ru с темой \"ACCESS KEY\" и названием агентства, которое вы представляете. Менеджер уточнит подробности и пришлет ACCESS KEY. Для каждой учетной записи на ЦИАН выдается отдельный ключ авторизации.  Далее все запросы выполняются с заголовком: `Authorization: Bearer <ACCESS KEY>`.  ### Дата и время Формат данных для времени (date-time): `2020-07-18 04:52:33.051204` и для даты (date): `2020-07-18`   Во всех запросах дата и время передаются и возвращаются в таймзоне `Europe/Moscow`.
 *
 * OpenAPI spec version: 1.0
 * Contact: import@cian.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AgentServicePackagesLimitsSchema Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AgentServicePackagesLimitsSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AgentServicePackagesLimitsSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'highlight_count' => 'int',
        'highlight_limit' => 'int',
        'paid_count' => 'int',
        'paid_limit' => 'int',
        'premium_count' => 'int',
        'premium_limit' => 'int',
        'top3_count' => 'int',
        'top3_limit' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'highlight_count' => 'int64',
        'highlight_limit' => 'int64',
        'paid_count' => 'int64',
        'paid_limit' => 'int64',
        'premium_count' => 'int64',
        'premium_limit' => 'int64',
        'top3_count' => 'int64',
        'top3_limit' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'highlight_count' => 'highlightCount',
        'highlight_limit' => 'highlightLimit',
        'paid_count' => 'paidCount',
        'paid_limit' => 'paidLimit',
        'premium_count' => 'premiumCount',
        'premium_limit' => 'premiumLimit',
        'top3_count' => 'top3Count',
        'top3_limit' => 'top3Limit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'highlight_count' => 'setHighlightCount',
        'highlight_limit' => 'setHighlightLimit',
        'paid_count' => 'setPaidCount',
        'paid_limit' => 'setPaidLimit',
        'premium_count' => 'setPremiumCount',
        'premium_limit' => 'setPremiumLimit',
        'top3_count' => 'setTop3Count',
        'top3_limit' => 'setTop3Limit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'highlight_count' => 'getHighlightCount',
        'highlight_limit' => 'getHighlightLimit',
        'paid_count' => 'getPaidCount',
        'paid_limit' => 'getPaidLimit',
        'premium_count' => 'getPremiumCount',
        'premium_limit' => 'getPremiumLimit',
        'top3_count' => 'getTop3Count',
        'top3_limit' => 'getTop3Limit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['highlight_count'] = isset($data['highlight_count']) ? $data['highlight_count'] : null;
        $this->container['highlight_limit'] = isset($data['highlight_limit']) ? $data['highlight_limit'] : null;
        $this->container['paid_count'] = isset($data['paid_count']) ? $data['paid_count'] : null;
        $this->container['paid_limit'] = isset($data['paid_limit']) ? $data['paid_limit'] : null;
        $this->container['premium_count'] = isset($data['premium_count']) ? $data['premium_count'] : null;
        $this->container['premium_limit'] = isset($data['premium_limit']) ? $data['premium_limit'] : null;
        $this->container['top3_count'] = isset($data['top3_count']) ? $data['top3_count'] : null;
        $this->container['top3_limit'] = isset($data['top3_limit']) ? $data['top3_limit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets highlight_count
     *
     * @return int
     */
    public function getHighlightCount()
    {
        return $this->container['highlight_count'];
    }

    /**
     * Sets highlight_count
     *
     * @param int $highlight_count Количество задействованных слотов в категории Выделение цветом
     *
     * @return $this
     */
    public function setHighlightCount($highlight_count)
    {
        $this->container['highlight_count'] = $highlight_count;

        return $this;
    }

    /**
     * Gets highlight_limit
     *
     * @return int
     */
    public function getHighlightLimit()
    {
        return $this->container['highlight_limit'];
    }

    /**
     * Sets highlight_limit
     *
     * @param int $highlight_limit Лимит объявлений в категории Выделение цветом
     *
     * @return $this
     */
    public function setHighlightLimit($highlight_limit)
    {
        $this->container['highlight_limit'] = $highlight_limit;

        return $this;
    }

    /**
     * Gets paid_count
     *
     * @return int
     */
    public function getPaidCount()
    {
        return $this->container['paid_count'];
    }

    /**
     * Sets paid_count
     *
     * @param int $paid_count Количество задействованных слотов в категории Платное
     *
     * @return $this
     */
    public function setPaidCount($paid_count)
    {
        $this->container['paid_count'] = $paid_count;

        return $this;
    }

    /**
     * Gets paid_limit
     *
     * @return int
     */
    public function getPaidLimit()
    {
        return $this->container['paid_limit'];
    }

    /**
     * Sets paid_limit
     *
     * @param int $paid_limit Лимит объявлений в категории Платное
     *
     * @return $this
     */
    public function setPaidLimit($paid_limit)
    {
        $this->container['paid_limit'] = $paid_limit;

        return $this;
    }

    /**
     * Gets premium_count
     *
     * @return int
     */
    public function getPremiumCount()
    {
        return $this->container['premium_count'];
    }

    /**
     * Sets premium_count
     *
     * @param int $premium_count Количество задействованных слотов в категории Премиум
     *
     * @return $this
     */
    public function setPremiumCount($premium_count)
    {
        $this->container['premium_count'] = $premium_count;

        return $this;
    }

    /**
     * Gets premium_limit
     *
     * @return int
     */
    public function getPremiumLimit()
    {
        return $this->container['premium_limit'];
    }

    /**
     * Sets premium_limit
     *
     * @param int $premium_limit Лимит объявлений в категории Премиум
     *
     * @return $this
     */
    public function setPremiumLimit($premium_limit)
    {
        $this->container['premium_limit'] = $premium_limit;

        return $this;
    }

    /**
     * Gets top3_count
     *
     * @return int
     */
    public function getTop3Count()
    {
        return $this->container['top3_count'];
    }

    /**
     * Sets top3_count
     *
     * @param int $top3_count Количество задействованных слотов в категории ТОП3
     *
     * @return $this
     */
    public function setTop3Count($top3_count)
    {
        $this->container['top3_count'] = $top3_count;

        return $this;
    }

    /**
     * Gets top3_limit
     *
     * @return int
     */
    public function getTop3Limit()
    {
        return $this->container['top3_limit'];
    }

    /**
     * Sets top3_limit
     *
     * @param int $top3_limit Лимит объявлений в категории ТОП3
     *
     * @return $this
     */
    public function setTop3Limit($top3_limit)
    {
        $this->container['top3_limit'] = $top3_limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


