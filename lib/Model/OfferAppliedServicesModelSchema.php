<?php
/**
 * OfferAppliedServicesModelSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ЦИАН АПИ
 *
 * <a href=\"https://www.cian.ru/help/about/37970/\">Условия использования</a>  ## Описание  ### Авторизация Для работы с API необходимо получить ключ авторизации. Для получения ключа нужно написать письмо на import@cian.ru с темой \"ACCESS KEY\" и названием агентства, которое вы представляете. Менеджер уточнит подробности и пришлет ACCESS KEY. Для каждой учетной записи на ЦИАН выдается отдельный ключ авторизации.  Далее все запросы выполняются с заголовком: `Authorization: Bearer <ACCESS KEY>`.  ### Дата и время Формат данных для времени (date-time): `2020-07-18 04:52:33.051204` и для даты (date): `2020-07-18`   Во всех запросах дата и время передаются и возвращаются в таймзоне `Europe/Moscow`.
 *
 * OpenAPI spec version: 1.0
 * Contact: import@cian.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OfferAppliedServicesModelSchema Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OfferAppliedServicesModelSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OfferAppliedServicesModelSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'actor_user_id' => 'int',
        'auto_prolong_enabled' => 'bool',
        'offer_id' => 'int',
        'published_user_id' => 'int',
        'services' => '\Swagger\Client\Model\OfferAppliedServiceModelSchema[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'actor_user_id' => 'int64',
        'auto_prolong_enabled' => null,
        'offer_id' => 'int64',
        'published_user_id' => 'int64',
        'services' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actor_user_id' => 'actorUserId',
        'auto_prolong_enabled' => 'autoProlongEnabled',
        'offer_id' => 'offerId',
        'published_user_id' => 'publishedUserId',
        'services' => 'services'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actor_user_id' => 'setActorUserId',
        'auto_prolong_enabled' => 'setAutoProlongEnabled',
        'offer_id' => 'setOfferId',
        'published_user_id' => 'setPublishedUserId',
        'services' => 'setServices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actor_user_id' => 'getActorUserId',
        'auto_prolong_enabled' => 'getAutoProlongEnabled',
        'offer_id' => 'getOfferId',
        'published_user_id' => 'getPublishedUserId',
        'services' => 'getServices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actor_user_id'] = isset($data['actor_user_id']) ? $data['actor_user_id'] : null;
        $this->container['auto_prolong_enabled'] = isset($data['auto_prolong_enabled']) ? $data['auto_prolong_enabled'] : null;
        $this->container['offer_id'] = isset($data['offer_id']) ? $data['offer_id'] : null;
        $this->container['published_user_id'] = isset($data['published_user_id']) ? $data['published_user_id'] : null;
        $this->container['services'] = isset($data['services']) ? $data['services'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['actor_user_id'] === null) {
            $invalidProperties[] = "'actor_user_id' can't be null";
        }
        if ($this->container['auto_prolong_enabled'] === null) {
            $invalidProperties[] = "'auto_prolong_enabled' can't be null";
        }
        if ($this->container['offer_id'] === null) {
            $invalidProperties[] = "'offer_id' can't be null";
        }
        if ($this->container['published_user_id'] === null) {
            $invalidProperties[] = "'published_user_id' can't be null";
        }
        if ($this->container['services'] === null) {
            $invalidProperties[] = "'services' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actor_user_id
     *
     * @return int
     */
    public function getActorUserId()
    {
        return $this->container['actor_user_id'];
    }

    /**
     * Sets actor_user_id
     *
     * @param int $actor_user_id Инициатор подключения услуги
     *
     * @return $this
     */
    public function setActorUserId($actor_user_id)
    {
        $this->container['actor_user_id'] = $actor_user_id;

        return $this;
    }

    /**
     * Gets auto_prolong_enabled
     *
     * @return bool
     */
    public function getAutoProlongEnabled()
    {
        return $this->container['auto_prolong_enabled'];
    }

    /**
     * Sets auto_prolong_enabled
     *
     * @param bool $auto_prolong_enabled Автоматическая пролонгация услуги
     *
     * @return $this
     */
    public function setAutoProlongEnabled($auto_prolong_enabled)
    {
        $this->container['auto_prolong_enabled'] = $auto_prolong_enabled;

        return $this;
    }

    /**
     * Gets offer_id
     *
     * @return int
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param int $offer_id Id объявления
     *
     * @return $this
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets published_user_id
     *
     * @return int
     */
    public function getPublishedUserId()
    {
        return $this->container['published_user_id'];
    }

    /**
     * Sets published_user_id
     *
     * @param int $published_user_id Пользователь оплативший услугу
     *
     * @return $this
     */
    public function setPublishedUserId($published_user_id)
    {
        $this->container['published_user_id'] = $published_user_id;

        return $this;
    }

    /**
     * Gets services
     *
     * @return \Swagger\Client\Model\OfferAppliedServiceModelSchema[]
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param \Swagger\Client\Model\OfferAppliedServiceModelSchema[] $services Подключенные услуги
     *
     * @return $this
     */
    public function setServices($services)
    {
        $this->container['services'] = $services;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


