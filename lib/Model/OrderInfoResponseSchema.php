<?php
/**
 * OrderInfoResponseSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ЦИАН АПИ
 *
 * <a href=\"https://www.cian.ru/help/about/37970/\">Условия использования</a>  ## Описание  ### Авторизация Для работы с API необходимо получить ключ авторизации. Для получения ключа нужно написать письмо на import@cian.ru с темой \"ACCESS KEY\" и названием агентства, которое вы представляете. Менеджер уточнит подробности и пришлет ACCESS KEY. Для каждой учетной записи на ЦИАН выдается отдельный ключ авторизации.  Далее все запросы выполняются с заголовком: `Authorization: Bearer <ACCESS KEY>`.  ### Дата и время Формат данных для времени (date-time): `2020-07-18 04:52:33.051204` и для даты (date): `2020-07-18`   Во всех запросах дата и время передаются и возвращаются в таймзоне `Europe/Moscow`.
 *
 * OpenAPI spec version: 1.0
 * Contact: import@cian.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OrderInfoResponseSchema Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderInfoResponseSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderInfoResponseSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active_feed_urls' => 'string[]',
        'has_images_problems' => 'bool',
        'has_offers_problems' => 'bool',
        'last_feed_check_date' => '\DateTime',
        'last_process_date' => '\DateTime',
        'order_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active_feed_urls' => null,
        'has_images_problems' => null,
        'has_offers_problems' => null,
        'last_feed_check_date' => 'date-time',
        'last_process_date' => 'date-time',
        'order_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_feed_urls' => 'activeFeedUrls',
        'has_images_problems' => 'hasImagesProblems',
        'has_offers_problems' => 'hasOffersProblems',
        'last_feed_check_date' => 'lastFeedCheckDate',
        'last_process_date' => 'lastProcessDate',
        'order_id' => 'orderId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_feed_urls' => 'setActiveFeedUrls',
        'has_images_problems' => 'setHasImagesProblems',
        'has_offers_problems' => 'setHasOffersProblems',
        'last_feed_check_date' => 'setLastFeedCheckDate',
        'last_process_date' => 'setLastProcessDate',
        'order_id' => 'setOrderId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_feed_urls' => 'getActiveFeedUrls',
        'has_images_problems' => 'getHasImagesProblems',
        'has_offers_problems' => 'getHasOffersProblems',
        'last_feed_check_date' => 'getLastFeedCheckDate',
        'last_process_date' => 'getLastProcessDate',
        'order_id' => 'getOrderId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_feed_urls'] = isset($data['active_feed_urls']) ? $data['active_feed_urls'] : null;
        $this->container['has_images_problems'] = isset($data['has_images_problems']) ? $data['has_images_problems'] : null;
        $this->container['has_offers_problems'] = isset($data['has_offers_problems']) ? $data['has_offers_problems'] : null;
        $this->container['last_feed_check_date'] = isset($data['last_feed_check_date']) ? $data['last_feed_check_date'] : null;
        $this->container['last_process_date'] = isset($data['last_process_date']) ? $data['last_process_date'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['active_feed_urls'] === null) {
            $invalidProperties[] = "'active_feed_urls' can't be null";
        }
        if ($this->container['has_images_problems'] === null) {
            $invalidProperties[] = "'has_images_problems' can't be null";
        }
        if ($this->container['has_offers_problems'] === null) {
            $invalidProperties[] = "'has_offers_problems' can't be null";
        }
        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_feed_urls
     *
     * @return string[]
     */
    public function getActiveFeedUrls()
    {
        return $this->container['active_feed_urls'];
    }

    /**
     * Sets active_feed_urls
     *
     * @param string[] $active_feed_urls URL-ы активных фидов по заказу
     *
     * @return $this
     */
    public function setActiveFeedUrls($active_feed_urls)
    {
        $this->container['active_feed_urls'] = $active_feed_urls;

        return $this;
    }

    /**
     * Gets has_images_problems
     *
     * @return bool
     */
    public function getHasImagesProblems()
    {
        return $this->container['has_images_problems'];
    }

    /**
     * Sets has_images_problems
     *
     * @param bool $has_images_problems Есть ли проблемы с фотографиями
     *
     * @return $this
     */
    public function setHasImagesProblems($has_images_problems)
    {
        $this->container['has_images_problems'] = $has_images_problems;

        return $this;
    }

    /**
     * Gets has_offers_problems
     *
     * @return bool
     */
    public function getHasOffersProblems()
    {
        return $this->container['has_offers_problems'];
    }

    /**
     * Sets has_offers_problems
     *
     * @param bool $has_offers_problems Есть ли проблемы с объявлениями
     *
     * @return $this
     */
    public function setHasOffersProblems($has_offers_problems)
    {
        $this->container['has_offers_problems'] = $has_offers_problems;

        return $this;
    }

    /**
     * Gets last_feed_check_date
     *
     * @return \DateTime
     */
    public function getLastFeedCheckDate()
    {
        return $this->container['last_feed_check_date'];
    }

    /**
     * Sets last_feed_check_date
     *
     * @param \DateTime $last_feed_check_date Дата последней проверки
     *
     * @return $this
     */
    public function setLastFeedCheckDate($last_feed_check_date)
    {
        $this->container['last_feed_check_date'] = $last_feed_check_date;

        return $this;
    }

    /**
     * Gets last_process_date
     *
     * @return \DateTime
     */
    public function getLastProcessDate()
    {
        return $this->container['last_process_date'];
    }

    /**
     * Sets last_process_date
     *
     * @param \DateTime $last_process_date Дата последнего процессинга
     *
     * @return $this
     */
    public function setLastProcessDate($last_process_date)
    {
        $this->container['last_process_date'] = $last_process_date;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id Id заказа
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


