<?php
/**
 * OfferAppliedServiceModelSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ЦИАН АПИ
 *
 * <a href=\"https://www.cian.ru/help/about/37970/\">Условия использования</a>  ## Описание  ### Авторизация Для работы с API необходимо получить ключ авторизации. Для получения ключа нужно написать письмо на import@cian.ru с темой \"ACCESS KEY\" и названием агентства, которое вы представляете. Менеджер уточнит подробности и пришлет ACCESS KEY. Для каждой учетной записи на ЦИАН выдается отдельный ключ авторизации.  Далее все запросы выполняются с заголовком: `Authorization: Bearer <ACCESS KEY>`.  ### Дата и время Формат данных для времени (date-time): `2020-07-18 04:52:33.051204` и для даты (date): `2020-07-18`   Во всех запросах дата и время передаются и возвращаются в таймзоне `Europe/Moscow`.
 *
 * OpenAPI spec version: 1.0
 * Contact: import@cian.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OfferAppliedServiceModelSchema Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OfferAppliedServiceModelSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OfferAppliedServiceModelSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'paid_by_service_package' => 'bool',
        'paid_till' => '\DateTime',
        'price' => 'double',
        'service_types' => 'string[]',
        'start_date' => '\DateTime',
        'tariffication_duration' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'paid_by_service_package' => null,
        'paid_till' => 'date-time',
        'price' => 'double',
        'service_types' => null,
        'start_date' => 'date-time',
        'tariffication_duration' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'paid_by_service_package' => 'paidByServicePackage',
        'paid_till' => 'paidTill',
        'price' => 'price',
        'service_types' => 'serviceTypes',
        'start_date' => 'startDate',
        'tariffication_duration' => 'tarifficationDuration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'paid_by_service_package' => 'setPaidByServicePackage',
        'paid_till' => 'setPaidTill',
        'price' => 'setPrice',
        'service_types' => 'setServiceTypes',
        'start_date' => 'setStartDate',
        'tariffication_duration' => 'setTarifficationDuration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'paid_by_service_package' => 'getPaidByServicePackage',
        'paid_till' => 'getPaidTill',
        'price' => 'getPrice',
        'service_types' => 'getServiceTypes',
        'start_date' => 'getStartDate',
        'tariffication_duration' => 'getTarifficationDuration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SERVICE_TYPES_BONUS_PAYMENT_EXPIRATION = 'BonusPaymentExpiration';
    const SERVICE_TYPES_DEBIT_OBJECT = 'DebitObject';
    const SERVICE_TYPES_FREE_OBJECT = 'FreeObject';
    const SERVICE_TYPES_HIGHLIGHT = 'Highlight';
    const SERVICE_TYPES_ORDER_CANCELLATION = 'OrderCancellation';
    const SERVICE_TYPES_ORDER_TRANSFER = 'OrderTransfer';
    const SERVICE_TYPES_PENALTY = 'Penalty';
    const SERVICE_TYPES_PREMIUM_OBJECT = 'PremiumObject';
    const SERVICE_TYPES_SERVICE_PACKAGE_ACTIVATION = 'ServicePackageActivation';
    const SERVICE_TYPES_STATUS_PRO = 'StatusPro';
    const SERVICE_TYPES_SUBSCRIPTION_FOR_PACKAGE = 'SubscriptionForPackage';
    const SERVICE_TYPES_TECH_SPEND = 'TechSpend';
    const SERVICE_TYPES_TECH_TRANSFER = 'TechTransfer';
    const SERVICE_TYPES_TOP3 = 'Top3';
    const SERVICE_TYPES_XML_IMPORT = 'XmlImport';
    const SERVICE_TYPES_AUCTION = 'auction';
    const SERVICE_TYPES_CALLTRACKING = 'calltracking';
    const SERVICE_TYPES_CPL_CALLTRACKING = 'cplCalltracking';
    const SERVICE_TYPES_DEMAND = 'demand';
    const SERVICE_TYPES_DEMAND_PACKAGE = 'demandPackage';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceTypesAllowableValues()
    {
        return [
            self::SERVICE_TYPES_BONUS_PAYMENT_EXPIRATION,
            self::SERVICE_TYPES_DEBIT_OBJECT,
            self::SERVICE_TYPES_FREE_OBJECT,
            self::SERVICE_TYPES_HIGHLIGHT,
            self::SERVICE_TYPES_ORDER_CANCELLATION,
            self::SERVICE_TYPES_ORDER_TRANSFER,
            self::SERVICE_TYPES_PENALTY,
            self::SERVICE_TYPES_PREMIUM_OBJECT,
            self::SERVICE_TYPES_SERVICE_PACKAGE_ACTIVATION,
            self::SERVICE_TYPES_STATUS_PRO,
            self::SERVICE_TYPES_SUBSCRIPTION_FOR_PACKAGE,
            self::SERVICE_TYPES_TECH_SPEND,
            self::SERVICE_TYPES_TECH_TRANSFER,
            self::SERVICE_TYPES_TOP3,
            self::SERVICE_TYPES_XML_IMPORT,
            self::SERVICE_TYPES_AUCTION,
            self::SERVICE_TYPES_CALLTRACKING,
            self::SERVICE_TYPES_CPL_CALLTRACKING,
            self::SERVICE_TYPES_DEMAND,
            self::SERVICE_TYPES_DEMAND_PACKAGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['paid_by_service_package'] = isset($data['paid_by_service_package']) ? $data['paid_by_service_package'] : null;
        $this->container['paid_till'] = isset($data['paid_till']) ? $data['paid_till'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['service_types'] = isset($data['service_types']) ? $data['service_types'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['tariffication_duration'] = isset($data['tariffication_duration']) ? $data['tariffication_duration'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['paid_by_service_package'] === null) {
            $invalidProperties[] = "'paid_by_service_package' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['service_types'] === null) {
            $invalidProperties[] = "'service_types' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['tariffication_duration'] === null) {
            $invalidProperties[] = "'tariffication_duration' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets paid_by_service_package
     *
     * @return bool
     */
    public function getPaidByServicePackage()
    {
        return $this->container['paid_by_service_package'];
    }

    /**
     * Sets paid_by_service_package
     *
     * @param bool $paid_by_service_package Оплачен за счет Пакета прожвижения
     *
     * @return $this
     */
    public function setPaidByServicePackage($paid_by_service_package)
    {
        $this->container['paid_by_service_package'] = $paid_by_service_package;

        return $this;
    }

    /**
     * Gets paid_till
     *
     * @return \DateTime
     */
    public function getPaidTill()
    {
        return $this->container['paid_till'];
    }

    /**
     * Sets paid_till
     *
     * @param \DateTime $paid_till Оплачена до
     *
     * @return $this
     */
    public function setPaidTill($paid_till)
    {
        $this->container['paid_till'] = $paid_till;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price Стоимость за тарифицационный период
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets service_types
     *
     * @return string[]
     */
    public function getServiceTypes()
    {
        return $this->container['service_types'];
    }

    /**
     * Sets service_types
     *
     * @param string[] $service_types `FreeObject`: Бесплатная публикация   `DebitObject`: Платная публикация   `PremiumObject`: Премиум публикация   `Top3`: Тор 3   `Highlight`: Выделение цветом   `calltracking`: Подмена номера, Calltracking, оно же \"защита номера\"   `XmlImport`: Выгрузка объявлений через XML   `SubscriptionForPackage`: Абонентская плата за пакет   `StatusPro`: Признак статуса ПРО   `ServicePackageActivation`: Массовый пакет   `Penalty`: Штрафное списание   `OrderCancellation`: Отмена платежа   `OrderTransfer`: перенос платежа   `TechSpend`: Произвольное списание   `TechTransfer`: Перенос произвольной суммы   `BonusPaymentExpiration`: Списание истекшего бонусного пополнения   `auction`: Списание за аукцион   `demand`: Списание за заявку на спрос   `demandPackage`: Списание за пакет заявок на спрос   `cplCalltracking`: Коллтрекинг по модели CPL
     *
     * @return $this
     */
    public function setServiceTypes($service_types)
    {
        $allowedValues = $this->getServiceTypesAllowableValues();
        if (array_diff($service_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'service_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['service_types'] = $service_types;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Дата подключения
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets tariffication_duration
     *
     * @return int
     */
    public function getTarifficationDuration()
    {
        return $this->container['tariffication_duration'];
    }

    /**
     * Sets tariffication_duration
     *
     * @param int $tariffication_duration Период оплаты услуги в микросекундах
     *
     * @return $this
     */
    public function setTarifficationDuration($tariffication_duration)
    {
        $this->container['tariffication_duration'] = $tariffication_duration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


